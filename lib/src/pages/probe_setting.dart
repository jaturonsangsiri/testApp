import 'package:firstapp/src/contants/contants.dart';
import 'package:firstapp/src/widgets/system_widget_custom.dart';
import 'package:firstapp/src/widgets/tab_item.dart';
import 'package:firstapp/src/widgets/appbar.dart';
import 'package:flutter/material.dart';

class ProbeSetting extends StatefulWidget {
  const ProbeSetting({super.key});

  @override
  State<ProbeSetting> createState() => _ProbeSettingState();
}

class _ProbeSettingState extends State<ProbeSetting> {
  // --------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ---------------
  // ‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏•‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
  bool temEntryNoti = true;
  // ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  bool isNotification = true;
  // ‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
  List<int> mins = [0,5,10,15,20,25,30];
  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ
  List<String> days = ['MON','TUE','WED','THU','FRI','SAT','SUN','OFF'];

  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  int delayfirstNoti = 0;
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥ (‡∏ó‡∏∏‡∏Å‡∏Å‡∏µ‡πà‡∏ô‡∏≤‡∏ó‡∏µ)
  int repeatNoti = 0;
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
  bool isDairyNoti = true;
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
  String firstDayNoti = 'MON';
  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà 1
  TimeOfDay firstTime = TimeOfDay(hour: 8, minute: 0);
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2
  String secondDayNoti = 'TUE';
  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà 2
  TimeOfDay secondTime = TimeOfDay(hour: 12, minute: 0);
  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3
  String thirdDayNoti = 'FRI';
  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà 3
  TimeOfDay thirdTime = TimeOfDay(hour: 17, minute: 0);

  BarCustom tabbarBottomAppbar = BarCustom();
  Systemwidgetcustom systemwidgetcustom = Systemwidgetcustom();

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏ß‡∏•‡∏≤
  Future<TimeOfDay?> _selectTime(BuildContext context, TimeOfDay time) async {
    return await showTimePicker(
      context: context,
      initialTime: time,
    );
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: tabbarBottomAppbar.appBarCustom(context, '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏û‡∏£‡∏ö', [
          TabItem(title: '‡πÇ‡∏û‡∏£‡∏ö 1'),
          TabItem(title: '‡πÇ‡∏û‡∏£‡∏ö 2'),
        ], null),
        backgroundColor: Colors.white,
        body: TabBarView(
          children: [
            probSreen(),
            probSreen(),
          ],
        ),
      ),
    );
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ Widget ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠ 1 Probe
  Widget probSreen() {
    return Column(
      children: [
        // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        Expanded(
          child: ListView(
            padding: const EdgeInsets.only(left: 20,right: 20,bottom: 20),
            children: [
              const SizedBox(height: 15,),
              // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏ã‡∏ü‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Probe
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text('üîî ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: secColor),),

                  ElevatedButton.icon(
                    onPressed: () {
                      print('üîò ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${isNotification ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}');
                      print('üå° ‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏≤: ${temEntryNoti ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}');
                      print('üîÅ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô: ${isDairyNoti ? "‡πÉ‡∏ä‡πà" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"}');
                      print('üïí ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: $delayfirstNoti ‡∏ô‡∏≤‡∏ó‡∏µ');
                      print('üîÑ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å: ${repeatNoti > 0 ? "$repeatNoti ‡∏ô‡∏≤‡∏ó‡∏µ" : "‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πâ‡∏≥"}');

                      print('üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
                      print('1Ô∏è‚É£ ‡∏ß‡∏±‡∏ô: $firstDayNoti $secondDayNoti $thirdDayNoti');
                      print('‡πÄ‡∏ß‡∏•‡∏≤: ‡πÄ‡∏ß‡∏•‡∏≤: ${firstTime.hour.toString().padLeft(2, '0')}:${firstTime.minute.toString().padLeft(2, '0')} ‡∏ô.\n${secondTime.hour.toString().padLeft(2, '0')}:${secondTime.minute.toString().padLeft(2, '0')} ‡∏ô.\n${thirdTime.hour.toString().padLeft(2, '0')}:${thirdTime.minute.toString().padLeft(2, '0')} ‡∏ô.');

                      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),behavior: SnackBarBehavior.floating,));
                    },
                    icon: const Icon(Icons.save,color: Colors.white,size: 30,),
                    label: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å',style: TextStyle(color: Colors.white, fontSize: 16,fontWeight: FontWeight.bold),),
                    style: ElevatedButton.styleFrom(backgroundColor: threeColor,shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)), padding: const EdgeInsets.symmetric(horizontal: 10,vertical: 8), elevation: 2,),
                  ),
                ],
              ),

              _buildSettingCard([
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏•‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏≤', 
                  trailing: CustomSwitch(
                    value: temEntryNoti, 
                    onChanged: (value) {
                      String txt = temEntryNoti ? '‡∏õ‡∏¥‡∏î' : '‡πÄ‡∏õ‡∏¥‡∏î';
                      systemwidgetcustom.showDialogConfirm(
                        context,
                        '$txt‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
                        '‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£$txt‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                        () {
                          setState(() {
                            temEntryNoti = value;
                          });
                          Navigator.pop(context);
                        },
                        primaryColor,
                        const Color.fromRGBO(255, 99, 71, 1),
                      );
                    },
                    inactiveColor: Colors.grey.shade400,
                    thumbColor: Colors.white,
                    activeColor: threeColor.withOpacity(0.5),
                  )
                ),
                const SizedBox(height: 10,),
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
                  trailing: CustomSwitch(
                    value: isNotification, 
                    onChanged: (value) {
                      String txt = isNotification ? '‡∏õ‡∏¥‡∏î' : '‡πÄ‡∏õ‡∏¥‡∏î';
                      systemwidgetcustom.showDialogConfirm(
                        context,
                        '$txt‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
                        '‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£$txt‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                        () {
                          setState(() {
                            isNotification = value;
                          });
                          Navigator.pop(context);
                        },
                        primaryColor,
                        const Color.fromRGBO(255, 99, 71, 1),
                      );
                    },
                    inactiveColor: Colors.grey.shade400,
                    thumbColor: Colors.white,
                    activeColor: threeColor.withOpacity(0.5),
                  )
                ),
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å', 
                  trailing: DropdownButtonHideUnderline(
                    child: DropdownButton<int>(
                      value: delayfirstNoti,
                      items: mins.map((min) {
                        return DropdownMenuItem<int>(
                          value: min,
                          child: Text(min.toString(), style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                        );
                      }).toList(),
                      onChanged: (int? newValue) {
                        if(newValue != null) {
                          setState(() {
                            delayfirstNoti = newValue;
                          });
                        }
                      },
                      dropdownColor: Colors.white,
                      icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥', 
                  trailing: DropdownButtonHideUnderline(
                    child: DropdownButton<int>(
                      value: repeatNoti,
                      items: mins.map((min) {
                        return DropdownMenuItem<int>(
                          value: min,
                          child: Text(min.toString(), style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                        );
                      }).toList(),
                      onChanged: (int? newValue) {
                        if(newValue != null) {
                          setState(() {
                            repeatNoti = newValue;
                          });
                        }
                      },
                      dropdownColor: Colors.white,
                      icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),
              ]),

              // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
              _buildMainTitle('üìÑ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'),
              _buildSettingCard([
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà', 
                  trailing: CustomSwitch(
                    value: isDairyNoti, 
                    onChanged: (value) {
                      String txt = isDairyNoti ? '‡∏õ‡∏¥‡∏î' : '‡πÄ‡∏õ‡∏¥‡∏î';
                      systemwidgetcustom.showDialogConfirm(
                        context,
                        '$txt‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤',
                        '‡∏ó‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£$txt‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
                        () {
                          setState(() {
                            isDairyNoti = value;
                          });
                          Navigator.pop(context);
                        },
                        primaryColor,
                        const Color.fromRGBO(255, 99, 71, 1),
                      );
                    },
                    inactiveColor: Colors.grey.shade400,
                    thumbColor: Colors.white,
                    activeColor: threeColor.withOpacity(0.5),
                  )
                ),
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
                  trailing: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: firstDayNoti,
                      items: days.map((day) {
                        return DropdownMenuItem<String>(
                          value: day,
                          child: Text(day, style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        if(newValue != null) {
                          setState(() {
                            firstDayNoti = newValue;
                          });
                        }
                      },
                      dropdownColor: Colors.white,
                      icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
                  trailing: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: secondDayNoti,
                      items: days.map((day) {
                        return DropdownMenuItem<String>(
                          value: day,
                          child: Text(day, style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        if(newValue != null) {
                          setState(() {
                            secondDayNoti = newValue;
                          });
                        }
                      },
                      dropdownColor: Colors.white,
                      icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),
                _buildRowSetting(
                  icon: Icons.thermostat, 
                  title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
                  trailing: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      value: thirdDayNoti,
                      items: days.map((day) {
                        return DropdownMenuItem<String>(
                          value: day,
                          child: Text(day, style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        if(newValue != null) {
                          setState(() {
                            thirdDayNoti = newValue;
                          });
                        }
                      },
                      dropdownColor: Colors.white,
                      icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),

                // ‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
                _buildSubTitle('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤'),
                _buildRowSetting(
                  icon: Icons.timer, 
                  title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á', 
                  trailing: GestureDetector(
                    onTap: () async {
                      // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                      final TimeOfDay? picked = await _selectTime(context, firstTime);

                      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                      if(picked != null && picked != firstTime) {
                        setState(() {
                          firstTime = picked;
                        });
                      }
                    },
                    child: Row(
                      children: [
                        Text(
                          '${firstTime.hour.toString().padLeft(2, '0')}.${firstTime.minute.toString().padLeft(2, '0')} ‡∏ô.',
                          style: const TextStyle(
                            color: secColor,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const Icon(Icons.arrow_drop_down, color: secColor),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 20,),
                _buildRowSetting(
                  icon: Icons.timer, 
                  title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á', 
                  trailing: GestureDetector(
                    onTap: () async {
                      // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                      final TimeOfDay? picked = await _selectTime(context, secondTime);

                      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                      if(picked != null && picked != secondTime) {
                        setState(() {
                          secondTime = picked;
                        });
                      }
                    },
                    child: Row(
                      children: [
                        Text(
                          '${secondTime.hour.toString().padLeft(2, '0')}.${secondTime.minute.toString().padLeft(2, '0')} ‡∏ô.',
                          style: const TextStyle(
                            color: secColor,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const Icon(Icons.arrow_drop_down, color: secColor),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 20,),
                _buildRowSetting(
                  icon: Icons.timer, 
                  title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°', 
                  trailing: GestureDetector(
                    onTap: () async {
                      // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                      final TimeOfDay? picked = await _selectTime(context, thirdTime);

                      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                      if(picked != null && picked != thirdTime) {
                        setState(() {
                          thirdTime = picked;
                        });
                      }
                    },
                    child: Row(
                      children: [
                        Text(
                          '${thirdTime.hour.toString().padLeft(2, '0')}.${thirdTime.minute.toString().padLeft(2, '0')} ‡∏ô.',
                          style: const TextStyle(
                            color: secColor,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const Icon(Icons.arrow_drop_down, color: secColor),
                      ],
                    ),
                  ),
                ),
              ]),
            ],
          ),
        ),
      ],
    );
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà
  Widget _buildMainTitle(String title) {
    return Padding(padding: const EdgeInsets.only(top: 24,bottom: 8), child: Text(title, style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: secColor),),);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Widget ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢
  Widget _buildSubTitle(String title) {
    return Padding(padding: const EdgeInsets.only(top: 24,bottom: 8), child: Text(title, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: secColor),),);
  }

  // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å
  Widget _buildSettingCard(List<Widget> widgets) {
    return Card(
      elevation: 3,
      color: Colors.white,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 18), child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: widgets,),),
    );
  }

  // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß
  Widget _buildRowSetting({required IconData icon, required String title, required Widget trailing}) {
    return Row(children: [
      Icon(icon,color: secColor,),
      const SizedBox(width: 16,),
      Expanded(
        child: Text(title, style: TextStyle(color: Color.fromARGB(255, 70, 70, 70), fontSize: 16, fontWeight: FontWeight.w500),),
      ),
      trailing,
    ],);
  }
}
import 'package:firstapp/src/bloc/probe_setting_bloc.dart';
import 'package:firstapp/src/contants/contants.dart';
import 'package:firstapp/src/widgets/probe_setting/setting_sub_widget.dart';
import 'package:firstapp/src/widgets/system_widget_custom.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class ReportSetting extends StatelessWidget {
  const ReportSetting({super.key,});

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏ß‡∏•‡∏≤
  Future<TimeOfDay?> _selectTime(BuildContext context, TimeOfDay time) async {
    return await showTimePicker(
      context: context,
      initialTime: time,
    );
  }

  @override
  Widget build(BuildContext context) {
    SettingSubWidget settingSubWidget = SettingSubWidget();
    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ
    List<String> days = ['MON','TUE','WED','THU','FRI','SAT','SUN','OFF'];
    return BlocBuilder<ProbeSettingBloc, ProbeSettingState>(
      builder: (context, state) {
        return settingSubWidget.buildSettingCard([
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          settingSubWidget.buildMainTitle('üìÑ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥'),
          settingSubWidget.buildRowSetting(
              icon: Icons.thermostat, 
              title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà', 
              trailing: CustomSwitch(
                value: state.isDairyNoti, 
                onChanged: (value) => context.read<ProbeSettingBloc>().add(SetValues(isDairyNoti: value)),
                inactiveColor: Colors.grey.shade400,
                thumbColor: Colors.white,
                activeColor: threeColor,
              )
            ),
            settingSubWidget.buildRowSetting(
              icon: Icons.thermostat, 
              title: '‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
              trailing: DropdownButtonHideUnderline(
                child: DropdownButton<String>(
                  value: state.firstDayNoti,
                  items: days.map((day) {
                    return DropdownMenuItem<String>(
                      value: day,
                      child: Text(day, style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                    );
                  }).toList(),
                  onChanged: (String? newValue) => context.read<ProbeSettingBloc>().add(SetValues(firstDayNoti: newValue)),
                  dropdownColor: Colors.white,
                  icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ),
            settingSubWidget.buildRowSetting(
              icon: Icons.thermostat, 
              title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
              trailing: DropdownButtonHideUnderline(
                child: DropdownButton<String>(
                  value: state.secondDayNoti,
                  items: days.map((day) {
                    return DropdownMenuItem<String>(
                      value: day,
                      child: Text(day, style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                    );
                  }).toList(),
                  onChanged: (String? newValue) => context.read<ProbeSettingBloc>().add(SetValues(secondDayNoti: newValue)),
                  dropdownColor: Colors.white,
                  icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ),
            settingSubWidget.buildRowSetting(
              icon: Icons.thermostat, 
              title: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 
              trailing: DropdownButtonHideUnderline(
                child: DropdownButton<String>(
                  value: state.thirdDayNoti,
                  items: days.map((day) {
                    return DropdownMenuItem<String>(
                      value: day,
                      child: Text(day, style: TextStyle(color: secColor,fontWeight: FontWeight.w500),),
                    );
                  }).toList(),
                  onChanged: (String? newValue) => context.read<ProbeSettingBloc>().add(SetValues(thirdDayNoti: newValue)),
                  dropdownColor: Colors.white,
                  icon: const Icon(Icons.arrow_drop_down_outlined, color: secColor,),
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ),

            // ‡∏ï‡∏±‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤
            settingSubWidget.buildSubTitle('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤'),
            settingSubWidget.buildRowSetting(
              icon: Icons.timer, 
              title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏∂‡πà‡∏á', 
              trailing: GestureDetector(
                onTap: () async {
                  // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                  final TimeOfDay? picked = await _selectTime(context, state.firstTime);

                  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                  context.read<ProbeSettingBloc>().add(SetValues(firstTime: picked));
                },
                child: Row(
                  children: [
                    Text(
                      '${state.firstTime.hour.toString().padLeft(2, '0')}.${state.firstTime.minute.toString().padLeft(2, '0')} ‡∏ô.',
                      style: const TextStyle(
                        color: secColor,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const Icon(Icons.arrow_drop_down, color: secColor),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20,),
            settingSubWidget.buildRowSetting(
              icon: Icons.timer, 
              title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á', 
              trailing: GestureDetector(
                onTap: () async {
                  // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                  final TimeOfDay? picked = await _selectTime(context, state.secondTime);

                  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                  context.read<ProbeSettingBloc>().add(SetValues(secondTime: picked));
                },
                child: Row(
                  children: [
                    Text(
                      '${state.secondTime.hour.toString().padLeft(2, '0')}.${state.secondTime.minute.toString().padLeft(2, '0')} ‡∏ô.',
                      style: const TextStyle(
                        color: secColor,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const Icon(Icons.arrow_drop_down, color: secColor),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20,),
            settingSubWidget.buildRowSetting(
              icon: Icons.timer, 
              title: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°', 
              trailing: GestureDetector(
                onTap: () async {
                  // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
                  final TimeOfDay? picked = await _selectTime(context, state.thirdTime);

                  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                  context.read<ProbeSettingBloc>().add(SetValues(thirdTime: picked));
                },
                child: Row(
                  children: [
                    Text(
                      '${state.thirdTime.hour.toString().padLeft(2, '0')}.${state.thirdTime.minute.toString().padLeft(2, '0')} ‡∏ô.',
                      style: const TextStyle(
                        color: secColor,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const Icon(Icons.arrow_drop_down, color: secColor),
                  ],
                ),
              ),
            ),
        ]);
      },
    );
  }
}